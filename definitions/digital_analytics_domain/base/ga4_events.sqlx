js {
    function intEventParam(parameter) {
        return '(SELECT ep.value.int_value FROM UNNEST(event_params) ep WHERE ep.key = "' +
            parameter + '" LIMIT 1)';
    }

    function stringEventParam(parameter) {
        return '(SELECT ep.value.string_value FROM UNNEST(event_params) ep WHERE ep.key = "' +
            parameter + '" LIMIT 1)';
    }

    function stripNotSet(expression, columnName) {
        if (typeof columnName === 'undefined') {
            columnName = expression;
        }
        return 'CASE WHEN ' + expression + '="(not set)" THEN "" ELSE ' + expression + ' END as ' + columnName
    }

    function notNullString(column) {
        return 'COALESCE(' + column + ', "") as ' + column;
    }
}

config {
    type: "view",
    schema: functions.baseSchema("ga4"),
    columns: docs.ga4_events,
    description: "View into GA4 exported tables. Not be used outside of the Dataform transformation jobs.",
    tags: ['ga4']
}

  /*
  * Copyright 2023 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
  -- TODO: not clear if the select from subselect is needed here.
SELECT
  ${notNullString('traffic_source_medium')},
  ${notNullString('traffic_source_name')},
  ${notNullString('traffic_source')},
  ${stripNotSet('continent')},
  ${stripNotSet('subcontinent')},
  ${stripNotSet('country')},
  ${stripNotSet('region')},
  ${stripNotSet('city')},
  ${stripNotSet('metro')},
  ${notNullString('device_category')},
  ${notNullString('device_mobile_brand_name')},
  ${notNullString('device_mobile_model_name')},
  ${notNullString('device_model')},
  ${notNullString('device_os')},
  ${notNullString('device_os_version')},
  ${notNullString('device_web_browser')},
  ${notNullString('device_web_browser_version')},
  COALESCE(SPLIT(device_web_browser_version, '.')[
  OFFSET
    (0)], "") AS normalized_device_web_browser_version,
  COALESCE(app_store, "") AS app_store,
  COALESCE(app_version, "") AS app_version,
  TIMESTAMP_MICROS(event_timestamp) AS event_timestamp,
  event_name,
  platform,
  stream_id,
  user_pseudo_id,
  user_id,
  ${notNullString('language')},
  COALESCE(LEFT(LANGUAGE, 2), "") AS normalized_language,
  COALESCE(device_advertising_id, 0) device_advertising_id,
  ga_session_id,
  ga_session_number,
  SAFE_CAST(session_engaged_during_event AS BOOL) AS session_engaged_during_event,
  engagement_time_msec,
  page_location,
  -- TODO: add unit test for the regexp extraction including the case where there is an anchor at the end of the URL
  CASE
    WHEN page_location IS NULL THEN NULL
    ELSE REGEXP_EXTRACT(page_location,".*[?&]gclid=([^&#]+)")
END
  gclid,
  page_title,
  page_referrer,
  percent_scrolled,
  outbound_click_url,
  ecommerce,
  user_ltv_revenue,
  user_ltv_currency,
  TIMESTAMP_MICROS(user_first_touch_timestamp) user_first_touch_timestamp,
  ${sql.selectFieldsFromRepeatedRecord('items', ga4.eventsItemsSelectedColumns, ga4.eventsItemsSafeCastColumns)},
  STRUCT ( privacy_info.analytics_storage = 0 AS analytics_excluded,
    privacy_info.ads_storage = 0 AS ads_excluded,
    privacy_info.uses_transient_token = 'Yes' AS uses_transient_token ) privacy_info,
  table_suffix
FROM (
  SELECT
    LOWER(traffic_source.medium) AS traffic_source_medium,
    LOWER(traffic_source.name) AS traffic_source_name,
    LOWER(traffic_source.source) AS traffic_source,
    geo.continent AS continent,
    geo.sub_continent AS subcontinent,
    geo.country AS country,
    geo.region AS region,
    geo.city AS city,
    geo.metro AS metro,
    device.category AS device_category,
    device.mobile_brand_name AS device_mobile_brand_name,
    device.mobile_model_name AS device_mobile_model_name,
    device.mobile_marketing_name AS device_model,
    device.operating_system AS device_os,
    device.operating_system_version AS device_os_version,
    device.web_info.browser AS device_web_browser,
    device.web_info.browser_version AS device_web_browser_version,
    app_info.install_store AS app_store,
    app_info.version AS app_version,
    SAFE_CAST(event_timestamp AS INT64) AS event_timestamp,
    event_name,
    platform,
    stream_id,
    user_id,
    user_pseudo_id,
    device.language AS LANGUAGE,
    device.advertising_id AS device_advertising_id,
    STRUCT ( ${stripNotSet('ecommerce.transaction_id', 'transaction_id')},
      SAFE_CAST(ecommerce.purchase_revenue_in_usd AS NUMERIC) AS purchase_revenue_in_usd,
      ecommerce.total_item_quantity AS total_item_quantity,
      ecommerce.refund_value_in_usd AS refund_value_in_usd ) ecommerce,
    ${intEventParam("ga_session_id")} AS ga_session_id,
    ${intEventParam("ga_session_number")} AS ga_session_number,
    (
    SELECT
      COALESCE(ep.value.int_value, SAFE_CAST(ep.value.string_value AS INT64))
    FROM
      UNNEST(event_params) ep
    WHERE
      ep.key = "session_engaged"
    LIMIT
      1) AS session_engaged_during_event,
    ${intEventParam("engagement_time_msec")} AS engagement_time_msec,
    ${stringEventParam("page_location")} AS page_location,
    ${stringEventParam("page_title")} AS page_title,
    ${stringEventParam("page_referrer")} AS page_referrer,
    ${intEventParam("percent_scrolled")} AS percent_scrolled,
    ${stringEventParam("link_url")} AS outbound_click_url,
    SAFE_CAST(user_ltv.revenue AS NUMERIC) AS user_ltv_revenue,
    user_ltv.currency AS user_ltv_currency,
    SAFE_CAST(user_first_touch_timestamp AS INT64) AS user_first_touch_timestamp,
    items,
    privacy_info,
    _TABLE_SUFFIX AS table_suffix
  FROM
    ${ref('events' + dataform.projectConfig.vars.ga4_export_table_suffix)}
    -- Exclude extra day exports
  WHERE
    NOT STARTS_WITH(_TABLE_SUFFIX, "intraday") )
